{"ast":null,"code":"const activo = true;\nlet nombre = \"Juan\";\nlet apellidos = \"Perez\";\nif (!activo) {} else {\n  nombre = \"Pedro\";\n  apellidos = \"García\";\n}\nconsole.log(nombre, \" \", apellidos);\n\n// Operador Ternario otra forma de hacer condicionales de forma más sencillo\n\n// operador\n\nactivo ? nombre = \"Juan\" : apellidos = \"Perez\";\n\n// Vamos a ver como hacer todo esto con el Operador Terminario es un sola linea\n\nconst nombre2 = activo ? \"Juan\" : \"Pedro\";\nconst apellidos2 = activo ? \"Perez\" : \"García\";\n\n// La manera más eficiencia de hacer esto con Operador Ternario es esta\nconsole.log(nombre2, \" \", apellidos2);\n\n// Otra manera más simplificada de hacer esto con Operador Ternario es la siguiente\n\n// Esto es muy útil para utiliar en React, porque puedes de forma muy Sencilla\n// obtener una sentencia de que me devuelve el elmento deseado o false\n// Utilizando el Operador &&\n\nconst nombre3 = activo && \"Alberto\";\nconst nombre4 = !activo && \"Carlos\";\n\n// El Operador && Es muy útil para hacer sentencias que permiten hacer sentencias que devuelven lo deseado o false\n\nconsole.log(true && \"Hola Amapola\");\nconsole.log(false && \"Adios Amapola\");\nconsole.log(true && \"Hola Amapola\");\nconsole.log(nombre3);\nconsole.log(nombre4);\nif (true & true) {\n  console.log(\"Operador &: \", true);\n}\n\n// Vamos a hacer una serie de pruebas para\n\nconsole.log(\"Primero el Texto luego el Booleano\", \"Hola Amapola\" && true);\nconsole.log(\"Primero el luego el Texto \", true && \"Hola Amapola\");","map":{"version":3,"names":["activo","nombre","apellidos","console","log","nombre2","apellidos2","nombre3","nombre4"],"sources":["/Users/josemanuelcepedayanez/Documents/02_Programacion/01_Curso_Programacion/20240829_DevTalles_React_Hook_MERN/02_Intro_JavaScript/intro-javascript/src/index.js"],"sourcesContent":["const activo = true;\n\nlet nombre = \"Juan\";\nlet apellidos = \"Perez\";\nif (!activo) {\n} else {\n  nombre = \"Pedro\";\n  apellidos = \"García\";\n}\n\nconsole.log(nombre, \" \", apellidos);\n\n// Operador Ternario otra forma de hacer condicionales de forma más sencillo\n\n// operador\n\nactivo ? (nombre = \"Juan\") : (apellidos = \"Perez\");\n\n// Vamos a ver como hacer todo esto con el Operador Terminario es un sola linea\n\nconst nombre2 = activo ? \"Juan\" : \"Pedro\";\nconst apellidos2 = activo ? \"Perez\" : \"García\";\n\n// La manera más eficiencia de hacer esto con Operador Ternario es esta\nconsole.log(nombre2, \" \", apellidos2);\n\n// Otra manera más simplificada de hacer esto con Operador Ternario es la siguiente\n\n// Esto es muy útil para utiliar en React, porque puedes de forma muy Sencilla\n// obtener una sentencia de que me devuelve el elmento deseado o false\n// Utilizando el Operador &&\n\nconst nombre3 = activo && \"Alberto\";\nconst nombre4 = !activo && \"Carlos\";\n\n// El Operador && Es muy útil para hacer sentencias que permiten hacer sentencias que devuelven lo deseado o false\n\nconsole.log(true && \"Hola Amapola\");\nconsole.log(false && \"Adios Amapola\");\nconsole.log(true && \"Hola Amapola\");\n\nconsole.log(nombre3);\nconsole.log(nombre4);\n\nif (true & true) {\n  console.log(\"Operador &: \", true);\n}\n\n// Vamos a hacer una serie de pruebas para\n\nconsole.log(\"Primero el Texto luego el Booleano\", \"Hola Amapola\" && true);\n\nconsole.log(\"Primero el luego el Texto \", true && \"Hola Amapola\");\n"],"mappings":"AAAA,MAAMA,MAAM,GAAG,IAAI;AAEnB,IAAIC,MAAM,GAAG,MAAM;AACnB,IAAIC,SAAS,GAAG,OAAO;AACvB,IAAI,CAACF,MAAM,EAAE,CACb,CAAC,MAAM;EACLC,MAAM,GAAG,OAAO;EAChBC,SAAS,GAAG,QAAQ;AACtB;AAEAC,OAAO,CAACC,GAAG,CAACH,MAAM,EAAE,GAAG,EAAEC,SAAS,CAAC;;AAEnC;;AAEA;;AAEAF,MAAM,GAAIC,MAAM,GAAG,MAAM,GAAKC,SAAS,GAAG,OAAQ;;AAElD;;AAEA,MAAMG,OAAO,GAAGL,MAAM,GAAG,MAAM,GAAG,OAAO;AACzC,MAAMM,UAAU,GAAGN,MAAM,GAAG,OAAO,GAAG,QAAQ;;AAE9C;AACAG,OAAO,CAACC,GAAG,CAACC,OAAO,EAAE,GAAG,EAAEC,UAAU,CAAC;;AAErC;;AAEA;AACA;AACA;;AAEA,MAAMC,OAAO,GAAGP,MAAM,IAAI,SAAS;AACnC,MAAMQ,OAAO,GAAG,CAACR,MAAM,IAAI,QAAQ;;AAEnC;;AAEAG,OAAO,CAACC,GAAG,CAAC,IAAI,IAAI,cAAc,CAAC;AACnCD,OAAO,CAACC,GAAG,CAAC,KAAK,IAAI,eAAe,CAAC;AACrCD,OAAO,CAACC,GAAG,CAAC,IAAI,IAAI,cAAc,CAAC;AAEnCD,OAAO,CAACC,GAAG,CAACG,OAAO,CAAC;AACpBJ,OAAO,CAACC,GAAG,CAACI,OAAO,CAAC;AAEpB,IAAI,IAAI,GAAG,IAAI,EAAE;EACfL,OAAO,CAACC,GAAG,CAAC,cAAc,EAAE,IAAI,CAAC;AACnC;;AAEA;;AAEAD,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAE,cAAc,IAAI,IAAI,CAAC;AAEzED,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAE,IAAI,IAAI,cAAc,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}