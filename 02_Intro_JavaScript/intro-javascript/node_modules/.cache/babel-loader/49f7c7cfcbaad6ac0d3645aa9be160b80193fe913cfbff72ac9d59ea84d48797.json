{"ast":null,"code":"// Promises\n\n//resolve: Es el resultado positivo del callback\n// reject: Es el resultado negativo del callback\n\nconst promesa = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    const numRandom = Math.random() * 10;\n    console.log(numRandom);\n    if (numRandom > 5) {\n      resolve(\"La promesa se cumplió\");\n      console.log(\"La promesa se cumplió\");\n    } else {\n      reject(\"La promesa falló\");\n      clg(\"La promesa falló\");\n    }\n  }, 2000);\n});\nconsole.log(promesa);","map":{"version":3,"names":["promesa","Promise","resolve","reject","setTimeout","numRandom","Math","random","console","log","clg"],"sources":["/Users/josemanuelcepedayanez/Documents/02_Programacion/01_Curso_Programacion/20240829_DevTalles_React_Hook_MERN/02_Intro_JavaScript/intro-javascript/src/index.js"],"sourcesContent":["// Promises\n\n//resolve: Es el resultado positivo del callback\n// reject: Es el resultado negativo del callback\n\nconst promesa = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    const numRandom = Math.random() * 10;\n    console.log(numRandom);\n    if (numRandom > 5) {\n      resolve(\"La promesa se cumplió\");\n      console.log(\"La promesa se cumplió\");\n    } else {\n      reject(\"La promesa falló\");\n      clg(\"La promesa falló\");\n    }\n  }, 2000);\n});\n\nconsole.log(promesa);\n"],"mappings":"AAAA;;AAEA;AACA;;AAEA,MAAMA,OAAO,GAAG,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;EAC/CC,UAAU,CAAC,MAAM;IACf,MAAMC,SAAS,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE;IACpCC,OAAO,CAACC,GAAG,CAACJ,SAAS,CAAC;IACtB,IAAIA,SAAS,GAAG,CAAC,EAAE;MACjBH,OAAO,CAAC,uBAAuB,CAAC;MAChCM,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;IACtC,CAAC,MAAM;MACLN,MAAM,CAAC,kBAAkB,CAAC;MAC1BO,GAAG,CAAC,kBAAkB,CAAC;IACzB;EACF,CAAC,EAAE,IAAI,CAAC;AACV,CAAC,CAAC;AAEFF,OAAO,CAACC,GAAG,CAACT,OAAO,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}